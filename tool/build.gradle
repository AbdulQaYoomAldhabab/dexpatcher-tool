/*
 * DexPatcher - Copyright 2015-2017 Rodrigo Balerdi
 * (GNU General Public License version 3 or later)
 *
 * DexPatcher is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 */

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

group = parent.group
version = parent.version

sourceCompatibility = '1.7'

repositories {
    jcenter()

    // Use local version of multidexlib2:
    flatDir dirs: '../../multidexlib2/build/libs'

    // Use local version of dexlib2:
    flatDir dirs: '../../smali/dexlib2/build/libs'
    flatDir dirs: '../../smali/util/build/libs'
}

def dexlib2Version = '2.2.2-barrier'
def multidexlib2Version = '2.2.2'

dependencies {
    compile 'commons-cli:commons-cli:1.2'
    compile('com.github.lanchon.dexpatcher:multidexlib2:' + multidexlib2Version) { transitive = false }

    // Use local version of dexlib2:
    compile 'org.smali:dexlib2:' + dexlib2Version
    compile 'org.smali:util:' + dexlib2Version

    // Use local version of transitive dependencies:
    compile 'com.google.code.findbugs:jsr305:1.3.9'
    compile 'com.google.guava:guava:18.0'
    compile 'com.beust:jcommander:1.64'
}

compileJava {
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

task writeVersionFile {
    ext.version = version
    ext.outputFile = file('build/classes/main/lanchon/dexpatcher/version')
    dependsOn compileJava
    inputs.property 'version', { ext.version }
    outputs.file { ext.outputFile }
    doLast {
        ext.outputFile.text = "${ext.version}"
    }
}
jar.dependsOn writeVersionFile

jar {
    baseName = 'dexpatcher-tool'
    manifest {
        attributes(
                'Implementation-Title': 'DexPatcher-tool',
                'Implementation-Version': version,
                'Main-Class': 'lanchon.dexpatcher.Main'
        )
    }
}

task shadowBugWorkaround(type: Jar) {
    destinationDir file('build/shadow-bug-workaround')
    baseName = 'nested-content'
    from jar
    from tasks.getByPath(':annotation:jar')
}

shadowJar {
    baseName = 'dexpatcher'
    classifier = null
    exclude 'META-INF/**'
    from 'extras'
    // Shadow plugin bug: explodes the nested jar.
    //from tasks.getByPath(':annotation:jar')
    // Workaround: double-nest the jar.
    from shadowBugWorkaround
}
assemble.dependsOn shadowJar
